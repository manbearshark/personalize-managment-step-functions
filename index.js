"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const iam = require("@aws-cdk/aws-iam");
const sfn = require("@aws-cdk/aws-stepfunctions");
const lambda = require("@aws-cdk/aws-lambda");
const sfn_tasks = require("@aws-cdk/aws-stepfunctions-tasks");
class JobPollerStack extends cdk.Stack {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const lambdaFn = new lambda.Function(this, 'PersonalizeAPIExecutor', {
            code: new lambda.AssetCode('resource/lambda'),
            handler: 'action-executor.handler',
            runtime: lambda.Runtime.NODEJS_10_X,
        });
        if (lambdaFn.role) { // This weirdness is to get around TS 'undefined' rules
            lambdaFn.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonPersonalizeFullAccess'));
            lambdaFn.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('CloudWatchFullAccess'));
        }
        const createDatasetGroup = new sfn.Task(this, 'Create Dataset Group', {
            task: new sfn_tasks.InvokeFunction(lambdaFn)
        });
        const describeDatasetGroupStatus = new sfn.Task(this, 'Describe Dataset Group', {
            task: new sfn_tasks.InvokeFunction(lambdaFn)
        });
        const setCreateDatasetGroup = new sfn.Pass(this, 'Set Create Dataset Group', {
            parameters: { verb: "createDatasetGroup", params: { "name.$": "$.datasetGroupName" } },
            //result: { value: { verb: "createDatasetGroup", params: { name: "datasetGroupName.$"} } },
            resultPath: "$.action"
        });
        const wait5Seconds = new sfn.Wait(this, 'Wait 5 Seconds', {
            time: sfn.WaitTime.duration(cdk.Duration.seconds(5))
        });
        const fail = new sfn.Fail(this, 'Create Failed');
        const success = new sfn.Succeed(this, 'Success');
        const isComplete = new sfn.Choice(this, 'Create Complete?');
        const dsgChain = sfn.Chain
            .start(setCreateDatasetGroup)
            .next(createDatasetGroup)
            .next(wait5Seconds)
            .next(describeDatasetGroupStatus)
            .next(isComplete
            .when(sfn.Condition.stringEquals('$.action.result.status', 'CREATE PENDING'), wait5Seconds)
            .when(sfn.Condition.stringEquals('$.action.result.status', 'CREATE IN_PROGRESS'), wait5Seconds)
            .when(sfn.Condition.stringEquals('$.action.result.status', 'CREATE FAILED'), fail)
            .when(sfn.Condition.stringEquals('$.action.result.status', 'ACTIVE'), success));
        new sfn.StateMachine(this, 'Create Dataset Group Machine', {
            definition: dsgChain,
            timeout: cdk.Duration.seconds(30)
        });
    }
}
const app = new cdk.App();
new JobPollerStack(app, 'aws-stepfunctions-integ');
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFzQztBQUN0Qyx3Q0FBeUM7QUFDekMsa0RBQW1EO0FBQ25ELDhDQUErQztBQUMvQyw4REFBK0Q7QUFFL0QsTUFBTSxjQUFlLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDbEMsWUFBWSxLQUFjLEVBQUUsRUFBVSxFQUFFLFFBQXdCLEVBQUU7UUFDOUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSx3QkFBd0IsRUFBRTtZQUNqRSxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDO1lBQzdDLE9BQU8sRUFBRSx5QkFBeUI7WUFDbEMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztTQUNwQyxDQUFDLENBQUM7UUFFTCxJQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRyx1REFBdUQ7WUFDeEUsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQztZQUN2SCxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1NBQ3RHO1FBRUQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLHNCQUFzQixFQUFFO1lBQ2xFLElBQUksRUFBRSxJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO1NBQy9DLENBQUMsQ0FBQztRQUVILE1BQU0sMEJBQTBCLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSx3QkFBd0IsRUFBRTtZQUM1RSxJQUFJLEVBQUUsSUFBSSxTQUFTLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQztTQUMvQyxDQUFDLENBQUM7UUFFSCxNQUFNLHFCQUFxQixHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsMEJBQTBCLEVBQUU7WUFDekUsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxFQUFFO1lBQ3RGLDJGQUEyRjtZQUMzRixVQUFVLEVBQUUsVUFBVTtTQUN6QixDQUFDLENBQUM7UUFFSCxNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFO1lBQ3RELElBQUksRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2RCxDQUFDLENBQUM7UUFFSCxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBRWpELE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFakQsTUFBTSxVQUFVLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBRTVELE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLO2FBQ3JCLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQzthQUM1QixJQUFJLENBQUMsa0JBQWtCLENBQUM7YUFDeEIsSUFBSSxDQUFDLFlBQVksQ0FBQzthQUNsQixJQUFJLENBQUMsMEJBQTBCLENBQUM7YUFDaEMsSUFBSSxDQUFDLFVBQVU7YUFDWCxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsd0JBQXdCLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxZQUFZLENBQUM7YUFDMUYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFFLG9CQUFvQixDQUFDLEVBQUUsWUFBWSxDQUFDO2FBQzlGLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsRUFBRSxlQUFlLENBQUMsRUFBRSxJQUFJLENBQUM7YUFDakYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFFLFFBQVEsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFeEYsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSw4QkFBOEIsRUFBRTtZQUN2RCxVQUFVLEVBQUUsUUFBUTtZQUNwQixPQUFPLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1NBQ3BDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQUVELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLElBQUksY0FBYyxDQUFDLEdBQUcsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO0FBQ25ELEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jb3JlJyk7XG5pbXBvcnQgaWFtID0gcmVxdWlyZShcIkBhd3MtY2RrL2F3cy1pYW1cIik7XG5pbXBvcnQgc2ZuID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLXN0ZXBmdW5jdGlvbnMnKTtcbmltcG9ydCBsYW1iZGEgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtbGFtYmRhJyk7XG5pbXBvcnQgc2ZuX3Rhc2tzID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLXN0ZXBmdW5jdGlvbnMtdGFza3MnKTtcblxuY2xhc3MgSm9iUG9sbGVyU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQXBwLCBpZDogc3RyaW5nLCBwcm9wczogY2RrLlN0YWNrUHJvcHMgPSB7fSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgICAgICBjb25zdCBsYW1iZGFGbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1BlcnNvbmFsaXplQVBJRXhlY3V0b3InLCB7XG4gICAgICAgICAgICBjb2RlOiBuZXcgbGFtYmRhLkFzc2V0Q29kZSgncmVzb3VyY2UvbGFtYmRhJyksXG4gICAgICAgICAgICBoYW5kbGVyOiAnYWN0aW9uLWV4ZWN1dG9yLmhhbmRsZXInLFxuICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzEwX1gsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgaWYobGFtYmRhRm4ucm9sZSkgeyAgLy8gVGhpcyB3ZWlyZG5lc3MgaXMgdG8gZ2V0IGFyb3VuZCBUUyAndW5kZWZpbmVkJyBydWxlc1xuICAgICAgICAgICAgbGFtYmRhRm4ucm9sZS5hZGRNYW5hZ2VkUG9saWN5KGlhbS5NYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZSgnc2VydmljZS1yb2xlL0FtYXpvblBlcnNvbmFsaXplRnVsbEFjY2VzcycpKTtcbiAgICAgICAgICAgIGxhbWJkYUZuLnJvbGUuYWRkTWFuYWdlZFBvbGljeShpYW0uTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoJ0Nsb3VkV2F0Y2hGdWxsQWNjZXNzJykpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBjcmVhdGVEYXRhc2V0R3JvdXAgPSBuZXcgc2ZuLlRhc2sodGhpcywgJ0NyZWF0ZSBEYXRhc2V0IEdyb3VwJywge1xuICAgICAgICAgICAgdGFzazogbmV3IHNmbl90YXNrcy5JbnZva2VGdW5jdGlvbihsYW1iZGFGbilcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZGVzY3JpYmVEYXRhc2V0R3JvdXBTdGF0dXMgPSBuZXcgc2ZuLlRhc2sodGhpcywgJ0Rlc2NyaWJlIERhdGFzZXQgR3JvdXAnLCB7XG4gICAgICAgICAgICB0YXNrOiBuZXcgc2ZuX3Rhc2tzLkludm9rZUZ1bmN0aW9uKGxhbWJkYUZuKVxuICAgICAgICB9KTtcbiAgICAgIFxuICAgICAgICBjb25zdCBzZXRDcmVhdGVEYXRhc2V0R3JvdXAgPSBuZXcgc2ZuLlBhc3ModGhpcywgJ1NldCBDcmVhdGUgRGF0YXNldCBHcm91cCcsIHtcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHsgdmVyYjogXCJjcmVhdGVEYXRhc2V0R3JvdXBcIiwgcGFyYW1zOiB7IFwibmFtZS4kXCI6IFwiJC5kYXRhc2V0R3JvdXBOYW1lXCIgfSB9LFxuICAgICAgICAgICAgLy9yZXN1bHQ6IHsgdmFsdWU6IHsgdmVyYjogXCJjcmVhdGVEYXRhc2V0R3JvdXBcIiwgcGFyYW1zOiB7IG5hbWU6IFwiZGF0YXNldEdyb3VwTmFtZS4kXCJ9IH0gfSxcbiAgICAgICAgICAgIHJlc3VsdFBhdGg6IFwiJC5hY3Rpb25cIlxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB3YWl0NVNlY29uZHMgPSBuZXcgc2ZuLldhaXQodGhpcywgJ1dhaXQgNSBTZWNvbmRzJywgeyBcbiAgICAgICAgICAgIHRpbWU6IHNmbi5XYWl0VGltZS5kdXJhdGlvbihjZGsuRHVyYXRpb24uc2Vjb25kcyg1KSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZmFpbCA9IG5ldyBzZm4uRmFpbCh0aGlzLCAnQ3JlYXRlIEZhaWxlZCcpO1xuXG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBuZXcgc2ZuLlN1Y2NlZWQodGhpcywgJ1N1Y2Nlc3MnKTtcblxuICAgICAgICBjb25zdCBpc0NvbXBsZXRlID0gbmV3IHNmbi5DaG9pY2UodGhpcywgJ0NyZWF0ZSBDb21wbGV0ZT8nKTtcblxuICAgICAgICBjb25zdCBkc2dDaGFpbiA9IHNmbi5DaGFpblxuICAgICAgICAgICAgLnN0YXJ0KHNldENyZWF0ZURhdGFzZXRHcm91cClcbiAgICAgICAgICAgIC5uZXh0KGNyZWF0ZURhdGFzZXRHcm91cClcbiAgICAgICAgICAgIC5uZXh0KHdhaXQ1U2Vjb25kcylcbiAgICAgICAgICAgIC5uZXh0KGRlc2NyaWJlRGF0YXNldEdyb3VwU3RhdHVzKVxuICAgICAgICAgICAgLm5leHQoaXNDb21wbGV0ZVxuICAgICAgICAgICAgICAgIC53aGVuKHNmbi5Db25kaXRpb24uc3RyaW5nRXF1YWxzKCckLmFjdGlvbi5yZXN1bHQuc3RhdHVzJywgJ0NSRUFURSBQRU5ESU5HJyksIHdhaXQ1U2Vjb25kcylcbiAgICAgICAgICAgICAgICAud2hlbihzZm4uQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5hY3Rpb24ucmVzdWx0LnN0YXR1cycsICdDUkVBVEUgSU5fUFJPR1JFU1MnKSwgd2FpdDVTZWNvbmRzKVxuICAgICAgICAgICAgICAgIC53aGVuKHNmbi5Db25kaXRpb24uc3RyaW5nRXF1YWxzKCckLmFjdGlvbi5yZXN1bHQuc3RhdHVzJywgJ0NSRUFURSBGQUlMRUQnKSwgZmFpbClcbiAgICAgICAgICAgICAgICAud2hlbihzZm4uQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5hY3Rpb24ucmVzdWx0LnN0YXR1cycsICdBQ1RJVkUnKSwgc3VjY2VzcykpO1xuXG4gICAgICAgIG5ldyBzZm4uU3RhdGVNYWNoaW5lKHRoaXMsICdDcmVhdGUgRGF0YXNldCBHcm91cCBNYWNoaW5lJywge1xuICAgICAgICAgICAgZGVmaW5pdGlvbjogZHNnQ2hhaW4sXG4gICAgICAgICAgICB0aW1lb3V0OiBjZGsuRHVyYXRpb24uc2Vjb25kcygzMClcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xubmV3IEpvYlBvbGxlclN0YWNrKGFwcCwgJ2F3cy1zdGVwZnVuY3Rpb25zLWludGVnJyk7XG5hcHAuc3ludGgoKTtcbiJdfQ==