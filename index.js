"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const iam = require("@aws-cdk/aws-iam");
const sfn = require("@aws-cdk/aws-stepfunctions");
const lambda = require("@aws-cdk/aws-lambda");
const sfn_tasks = require("@aws-cdk/aws-stepfunctions-tasks");
class JobPollerStack extends cdk.Stack {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const lambdaFn = new lambda.Function(this, 'PersonalizeAPIExecutor', {
            code: new lambda.AssetCode('resource/lambda'),
            handler: 'action-executor.handler',
            runtime: lambda.Runtime.NODEJS_10_X,
        });
        if (lambdaFn.role) { // This weirdness is to get around TS 'undefined' rules
            lambdaFn.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonPersonalizeFullAccess'));
            lambdaFn.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('CloudWatchFullAccess'));
        }
        const createDatasetGroup = new sfn.Task(this, 'Create Dataset Group', {
            task: new sfn_tasks.InvokeFunction(lambdaFn)
        });
        const describeDatasetGroupStatus = new sfn.Task(this, 'Describe Dataset Group', {
            task: new sfn_tasks.InvokeFunction(lambdaFn)
        });
        const setCreateDatasetGroup = new sfn.Pass(this, 'Set Create Dataset Group', {
            parameters: { verb: "createDatasetGroup", params: { "name.$": "$.datasetGroupName" } },
            //result: { value: { verb: "createDatasetGroup", params: { name: "datasetGroupName.$"} } },
            resultPath: "$.action"
        });
        const setDescribeDatasetGroup = new sfn.Pass(this, 'Set Describe Dataset Group', {
            parameters: { verb: "describeDatasetGroup", params: { "datasetGroupArn.$": "$.action.result.datasetGroupArn" } },
            resultPath: "$.action"
        });
        const wait5Seconds = new sfn.Wait(this, 'Wait 5 Seconds', {
            time: sfn.WaitTime.duration(cdk.Duration.seconds(5))
        });
        const fail = new sfn.Fail(this, 'Create Failed');
        const success = new sfn.Succeed(this, 'Success');
        const isComplete = new sfn.Choice(this, 'Create Complete?');
        const dsgChain = sfn.Chain
            .start(setCreateDatasetGroup)
            .next(createDatasetGroup)
            .next(wait5Seconds)
            .next(setDescribeDatasetGroup)
            .next(describeDatasetGroupStatus)
            .next(isComplete
            .when(sfn.Condition.stringEquals('$.action.result.status', 'CREATE PENDING'), wait5Seconds)
            .when(sfn.Condition.stringEquals('$.action.result.status', 'CREATE IN_PROGRESS'), wait5Seconds)
            .when(sfn.Condition.stringEquals('$.action.result.status', 'CREATE FAILED'), fail)
            .when(sfn.Condition.stringEquals('$.action.result.status', 'ACTIVE'), success));
        new sfn.StateMachine(this, 'Create Dataset Group Machine', {
            definition: dsgChain,
            timeout: cdk.Duration.seconds(30)
        });
    }
}
const app = new cdk.App();
new JobPollerStack(app, 'aws-stepfunctions-integ');
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFzQztBQUN0Qyx3Q0FBeUM7QUFDekMsa0RBQW1EO0FBQ25ELDhDQUErQztBQUMvQyw4REFBK0Q7QUFFL0QsTUFBTSxjQUFlLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDbEMsWUFBWSxLQUFjLEVBQUUsRUFBVSxFQUFFLFFBQXdCLEVBQUU7UUFDOUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSx3QkFBd0IsRUFBRTtZQUNqRSxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDO1lBQzdDLE9BQU8sRUFBRSx5QkFBeUI7WUFDbEMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztTQUNwQyxDQUFDLENBQUM7UUFFTCxJQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRyx1REFBdUQ7WUFDeEUsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQztZQUN2SCxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1NBQ3RHO1FBRUQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLHNCQUFzQixFQUFFO1lBQ2xFLElBQUksRUFBRSxJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO1NBQy9DLENBQUMsQ0FBQztRQUVILE1BQU0sMEJBQTBCLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSx3QkFBd0IsRUFBRTtZQUM1RSxJQUFJLEVBQUUsSUFBSSxTQUFTLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQztTQUMvQyxDQUFDLENBQUM7UUFFSCxNQUFNLHFCQUFxQixHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsMEJBQTBCLEVBQUU7WUFDekUsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxFQUFFO1lBQ3RGLDJGQUEyRjtZQUMzRixVQUFVLEVBQUUsVUFBVTtTQUN6QixDQUFDLENBQUM7UUFFSCxNQUFNLHVCQUF1QixHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsNEJBQTRCLEVBQUU7WUFDN0UsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLHNCQUFzQixFQUFFLE1BQU0sRUFBRSxFQUFFLG1CQUFtQixFQUFFLGlDQUFpQyxFQUFFLEVBQUU7WUFDaEgsVUFBVSxFQUFFLFVBQVU7U0FDekIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUN0RCxJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkQsQ0FBQyxDQUFDO1FBRUgsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsQ0FBQztRQUVqRCxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRWpELE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUU1RCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSzthQUNyQixLQUFLLENBQUMscUJBQXFCLENBQUM7YUFDNUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDO2FBQ3hCLElBQUksQ0FBQyxZQUFZLENBQUM7YUFDbEIsSUFBSSxDQUFDLHVCQUF1QixDQUFDO2FBQzdCLElBQUksQ0FBQywwQkFBMEIsQ0FBQzthQUNoQyxJQUFJLENBQUMsVUFBVTthQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLFlBQVksQ0FBQzthQUMxRixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsd0JBQXdCLEVBQUUsb0JBQW9CLENBQUMsRUFBRSxZQUFZLENBQUM7YUFDOUYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFFLGVBQWUsQ0FBQyxFQUFFLElBQUksQ0FBQzthQUNqRixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsd0JBQXdCLEVBQUUsUUFBUSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUV4RixJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLDhCQUE4QixFQUFFO1lBQ3ZELFVBQVUsRUFBRSxRQUFRO1lBQ3BCLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7U0FDcEMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsSUFBSSxjQUFjLENBQUMsR0FBRyxFQUFFLHlCQUF5QixDQUFDLENBQUM7QUFDbkQsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NvcmUnKTtcbmltcG9ydCBpYW0gPSByZXF1aXJlKFwiQGF3cy1jZGsvYXdzLWlhbVwiKTtcbmltcG9ydCBzZm4gPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucycpO1xuaW1wb3J0IGxhbWJkYSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnKTtcbmltcG9ydCBzZm5fdGFza3MgPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucy10YXNrcycpO1xuXG5jbGFzcyBKb2JQb2xsZXJTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcsIHByb3BzOiBjZGsuU3RhY2tQcm9wcyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgICAgIGNvbnN0IGxhbWJkYUZuID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnUGVyc29uYWxpemVBUElFeGVjdXRvcicsIHtcbiAgICAgICAgICAgIGNvZGU6IG5ldyBsYW1iZGEuQXNzZXRDb2RlKCdyZXNvdXJjZS9sYW1iZGEnKSxcbiAgICAgICAgICAgIGhhbmRsZXI6ICdhY3Rpb24tZXhlY3V0b3IuaGFuZGxlcicsXG4gICAgICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTBfWCxcbiAgICAgICAgICB9KTtcblxuICAgICAgICBpZihsYW1iZGFGbi5yb2xlKSB7ICAvLyBUaGlzIHdlaXJkbmVzcyBpcyB0byBnZXQgYXJvdW5kIFRTICd1bmRlZmluZWQnIHJ1bGVzXG4gICAgICAgICAgICBsYW1iZGFGbi5yb2xlLmFkZE1hbmFnZWRQb2xpY3koaWFtLk1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKCdzZXJ2aWNlLXJvbGUvQW1hem9uUGVyc29uYWxpemVGdWxsQWNjZXNzJykpO1xuICAgICAgICAgICAgbGFtYmRhRm4ucm9sZS5hZGRNYW5hZ2VkUG9saWN5KGlhbS5NYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZSgnQ2xvdWRXYXRjaEZ1bGxBY2Nlc3MnKSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNyZWF0ZURhdGFzZXRHcm91cCA9IG5ldyBzZm4uVGFzayh0aGlzLCAnQ3JlYXRlIERhdGFzZXQgR3JvdXAnLCB7XG4gICAgICAgICAgICB0YXNrOiBuZXcgc2ZuX3Rhc2tzLkludm9rZUZ1bmN0aW9uKGxhbWJkYUZuKVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBkZXNjcmliZURhdGFzZXRHcm91cFN0YXR1cyA9IG5ldyBzZm4uVGFzayh0aGlzLCAnRGVzY3JpYmUgRGF0YXNldCBHcm91cCcsIHtcbiAgICAgICAgICAgIHRhc2s6IG5ldyBzZm5fdGFza3MuSW52b2tlRnVuY3Rpb24obGFtYmRhRm4pXG4gICAgICAgIH0pO1xuICAgICAgXG4gICAgICAgIGNvbnN0IHNldENyZWF0ZURhdGFzZXRHcm91cCA9IG5ldyBzZm4uUGFzcyh0aGlzLCAnU2V0IENyZWF0ZSBEYXRhc2V0IEdyb3VwJywge1xuICAgICAgICAgICAgcGFyYW1ldGVyczogeyB2ZXJiOiBcImNyZWF0ZURhdGFzZXRHcm91cFwiLCBwYXJhbXM6IHsgXCJuYW1lLiRcIjogXCIkLmRhdGFzZXRHcm91cE5hbWVcIiB9IH0sXG4gICAgICAgICAgICAvL3Jlc3VsdDogeyB2YWx1ZTogeyB2ZXJiOiBcImNyZWF0ZURhdGFzZXRHcm91cFwiLCBwYXJhbXM6IHsgbmFtZTogXCJkYXRhc2V0R3JvdXBOYW1lLiRcIn0gfSB9LFxuICAgICAgICAgICAgcmVzdWx0UGF0aDogXCIkLmFjdGlvblwiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHNldERlc2NyaWJlRGF0YXNldEdyb3VwID0gbmV3IHNmbi5QYXNzKHRoaXMsICdTZXQgRGVzY3JpYmUgRGF0YXNldCBHcm91cCcsIHtcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHsgdmVyYjogXCJkZXNjcmliZURhdGFzZXRHcm91cFwiLCBwYXJhbXM6IHsgXCJkYXRhc2V0R3JvdXBBcm4uJFwiOiBcIiQuYWN0aW9uLnJlc3VsdC5kYXRhc2V0R3JvdXBBcm5cIiB9IH0sXG4gICAgICAgICAgICByZXN1bHRQYXRoOiBcIiQuYWN0aW9uXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgd2FpdDVTZWNvbmRzID0gbmV3IHNmbi5XYWl0KHRoaXMsICdXYWl0IDUgU2Vjb25kcycsIHsgXG4gICAgICAgICAgICB0aW1lOiBzZm4uV2FpdFRpbWUuZHVyYXRpb24oY2RrLkR1cmF0aW9uLnNlY29uZHMoNSkpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGZhaWwgPSBuZXcgc2ZuLkZhaWwodGhpcywgJ0NyZWF0ZSBGYWlsZWQnKTtcblxuICAgICAgICBjb25zdCBzdWNjZXNzID0gbmV3IHNmbi5TdWNjZWVkKHRoaXMsICdTdWNjZXNzJyk7XG5cbiAgICAgICAgY29uc3QgaXNDb21wbGV0ZSA9IG5ldyBzZm4uQ2hvaWNlKHRoaXMsICdDcmVhdGUgQ29tcGxldGU/Jyk7XG5cbiAgICAgICAgY29uc3QgZHNnQ2hhaW4gPSBzZm4uQ2hhaW5cbiAgICAgICAgICAgIC5zdGFydChzZXRDcmVhdGVEYXRhc2V0R3JvdXApXG4gICAgICAgICAgICAubmV4dChjcmVhdGVEYXRhc2V0R3JvdXApXG4gICAgICAgICAgICAubmV4dCh3YWl0NVNlY29uZHMpXG4gICAgICAgICAgICAubmV4dChzZXREZXNjcmliZURhdGFzZXRHcm91cClcbiAgICAgICAgICAgIC5uZXh0KGRlc2NyaWJlRGF0YXNldEdyb3VwU3RhdHVzKVxuICAgICAgICAgICAgLm5leHQoaXNDb21wbGV0ZVxuICAgICAgICAgICAgICAgIC53aGVuKHNmbi5Db25kaXRpb24uc3RyaW5nRXF1YWxzKCckLmFjdGlvbi5yZXN1bHQuc3RhdHVzJywgJ0NSRUFURSBQRU5ESU5HJyksIHdhaXQ1U2Vjb25kcylcbiAgICAgICAgICAgICAgICAud2hlbihzZm4uQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5hY3Rpb24ucmVzdWx0LnN0YXR1cycsICdDUkVBVEUgSU5fUFJPR1JFU1MnKSwgd2FpdDVTZWNvbmRzKVxuICAgICAgICAgICAgICAgIC53aGVuKHNmbi5Db25kaXRpb24uc3RyaW5nRXF1YWxzKCckLmFjdGlvbi5yZXN1bHQuc3RhdHVzJywgJ0NSRUFURSBGQUlMRUQnKSwgZmFpbClcbiAgICAgICAgICAgICAgICAud2hlbihzZm4uQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5hY3Rpb24ucmVzdWx0LnN0YXR1cycsICdBQ1RJVkUnKSwgc3VjY2VzcykpO1xuXG4gICAgICAgIG5ldyBzZm4uU3RhdGVNYWNoaW5lKHRoaXMsICdDcmVhdGUgRGF0YXNldCBHcm91cCBNYWNoaW5lJywge1xuICAgICAgICAgICAgZGVmaW5pdGlvbjogZHNnQ2hhaW4sXG4gICAgICAgICAgICB0aW1lb3V0OiBjZGsuRHVyYXRpb24uc2Vjb25kcygzMClcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xubmV3IEpvYlBvbGxlclN0YWNrKGFwcCwgJ2F3cy1zdGVwZnVuY3Rpb25zLWludGVnJyk7XG5hcHAuc3ludGgoKTtcbiJdfQ==