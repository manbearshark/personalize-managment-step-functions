"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const iam = require("@aws-cdk/aws-iam");
const sfn = require("@aws-cdk/aws-stepfunctions");
const lambda = require("@aws-cdk/aws-lambda");
const sfn_tasks = require("@aws-cdk/aws-stepfunctions-tasks");
class JobPollerStack extends cdk.Stack {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const lambdaFn = new lambda.Function(this, 'PersonalizeAPIExecutor', {
            code: new lambda.AssetCode('resource/lambda'),
            handler: 'action-executor.handler',
            runtime: lambda.Runtime.NODEJS_10_X,
        });
        if (lambdaFn.role) { // This weirdness is to get around TS 'undefined' rules
            lambdaFn.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonPersonalizeFullAccess'));
            lambdaFn.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('CloudWatchFullAccess'));
        }
        const createDatasetGroup = new sfn.Task(this, 'Create Dataset Group', {
            task: new sfn_tasks.InvokeFunction(lambdaFn)
        });
        const describeDatasetGroupStatus = new sfn.Task(this, 'Describe Dataset Group', {
            task: new sfn_tasks.InvokeFunction(lambdaFn)
        });
        const setCreateDatasetGroup = new sfn.Pass(this, 'Set Create Dataset Group', {
            result: { value: { verb: "createDatasetGroup", params: { name: "datasetGroupName.$" } } },
            resultPath: "$.action"
        });
        const wait30Seconds = new sfn.Wait(this, 'Wait 30 Seconds', {
            time: sfn.WaitTime.duration(cdk.Duration.seconds(30))
        });
        const fail = new sfn.Fail(this, 'Create Failed');
        const success = new sfn.Succeed(this, 'Success');
        const isComplete = new sfn.Choice(this, 'Create Complete?');
        const dsgChain = sfn.Chain
            .start(setCreateDatasetGroup)
            .next(createDatasetGroup)
            .next(wait30Seconds)
            .next(describeDatasetGroupStatus)
            .next(isComplete
            .when(sfn.Condition.stringEquals('$.action.result.status', 'CREATE PENDING'), wait30Seconds)
            .when(sfn.Condition.stringEquals('$.action.result.status', 'CREATE IN_PROGRESS'), wait30Seconds)
            .when(sfn.Condition.stringEquals('$.action.result.status', 'CREATE FAILED'), fail)
            .when(sfn.Condition.stringEquals('$.action.result.status', 'ACTIVE'), success));
        new sfn.StateMachine(this, 'Create Dataset Group Machine', {
            definition: dsgChain,
            timeout: cdk.Duration.seconds(30)
        });
    }
}
const app = new cdk.App();
new JobPollerStack(app, 'aws-stepfunctions-integ');
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFzQztBQUN0Qyx3Q0FBeUM7QUFDekMsa0RBQW1EO0FBQ25ELDhDQUErQztBQUMvQyw4REFBK0Q7QUFFL0QsTUFBTSxjQUFlLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDbEMsWUFBWSxLQUFjLEVBQUUsRUFBVSxFQUFFLFFBQXdCLEVBQUU7UUFDOUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSx3QkFBd0IsRUFBRTtZQUNqRSxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDO1lBQzdDLE9BQU8sRUFBRSx5QkFBeUI7WUFDbEMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztTQUNwQyxDQUFDLENBQUM7UUFFTCxJQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRyx1REFBdUQ7WUFDeEUsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQztZQUN2SCxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1NBQ3RHO1FBRUQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLHNCQUFzQixFQUFFO1lBQ2xFLElBQUksRUFBRSxJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO1NBQy9DLENBQUMsQ0FBQztRQUVILE1BQU0sMEJBQTBCLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSx3QkFBd0IsRUFBRTtZQUM1RSxJQUFJLEVBQUUsSUFBSSxTQUFTLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQztTQUMvQyxDQUFDLENBQUM7UUFFSCxNQUFNLHFCQUFxQixHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsMEJBQTBCLEVBQUU7WUFDekUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBQyxFQUFFLEVBQUU7WUFDeEYsVUFBVSxFQUFFLFVBQVU7U0FDekIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRTtZQUN4RCxJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDeEQsQ0FBQyxDQUFDO1FBRUgsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsQ0FBQztRQUVqRCxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRWpELE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUU1RCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSzthQUNyQixLQUFLLENBQUMscUJBQXFCLENBQUM7YUFDNUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDO2FBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUM7YUFDbkIsSUFBSSxDQUFDLDBCQUEwQixDQUFDO2FBQ2hDLElBQUksQ0FBQyxVQUFVO2FBQ1gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFFLGdCQUFnQixDQUFDLEVBQUUsYUFBYSxDQUFDO2FBQzNGLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsRUFBRSxvQkFBb0IsQ0FBQyxFQUFFLGFBQWEsQ0FBQzthQUMvRixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsd0JBQXdCLEVBQUUsZUFBZSxDQUFDLEVBQUUsSUFBSSxDQUFDO2FBQ2pGLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRXhGLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsOEJBQThCLEVBQUU7WUFDdkQsVUFBVSxFQUFFLFFBQVE7WUFDcEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztTQUNwQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixJQUFJLGNBQWMsQ0FBQyxHQUFHLEVBQUUseUJBQXlCLENBQUMsQ0FBQztBQUNuRCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY29yZScpO1xuaW1wb3J0IGlhbSA9IHJlcXVpcmUoXCJAYXdzLWNkay9hd3MtaWFtXCIpO1xuaW1wb3J0IHNmbiA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zJyk7XG5pbXBvcnQgbGFtYmRhID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWxhbWJkYScpO1xuaW1wb3J0IHNmbl90YXNrcyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zLXRhc2tzJyk7XG5cbmNsYXNzIEpvYlBvbGxlclN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkFwcCwgaWQ6IHN0cmluZywgcHJvcHM6IGNkay5TdGFja1Byb3BzID0ge30pIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICAgICAgY29uc3QgbGFtYmRhRm4gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdQZXJzb25hbGl6ZUFQSUV4ZWN1dG9yJywge1xuICAgICAgICAgICAgY29kZTogbmV3IGxhbWJkYS5Bc3NldENvZGUoJ3Jlc291cmNlL2xhbWJkYScpLFxuICAgICAgICAgICAgaGFuZGxlcjogJ2FjdGlvbi1leGVjdXRvci5oYW5kbGVyJyxcbiAgICAgICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xMF9YLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmKGxhbWJkYUZuLnJvbGUpIHsgIC8vIFRoaXMgd2VpcmRuZXNzIGlzIHRvIGdldCBhcm91bmQgVFMgJ3VuZGVmaW5lZCcgcnVsZXNcbiAgICAgICAgICAgIGxhbWJkYUZuLnJvbGUuYWRkTWFuYWdlZFBvbGljeShpYW0uTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoJ3NlcnZpY2Utcm9sZS9BbWF6b25QZXJzb25hbGl6ZUZ1bGxBY2Nlc3MnKSk7XG4gICAgICAgICAgICBsYW1iZGFGbi5yb2xlLmFkZE1hbmFnZWRQb2xpY3koaWFtLk1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKCdDbG91ZFdhdGNoRnVsbEFjY2VzcycpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgY3JlYXRlRGF0YXNldEdyb3VwID0gbmV3IHNmbi5UYXNrKHRoaXMsICdDcmVhdGUgRGF0YXNldCBHcm91cCcsIHtcbiAgICAgICAgICAgIHRhc2s6IG5ldyBzZm5fdGFza3MuSW52b2tlRnVuY3Rpb24obGFtYmRhRm4pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGRlc2NyaWJlRGF0YXNldEdyb3VwU3RhdHVzID0gbmV3IHNmbi5UYXNrKHRoaXMsICdEZXNjcmliZSBEYXRhc2V0IEdyb3VwJywge1xuICAgICAgICAgICAgdGFzazogbmV3IHNmbl90YXNrcy5JbnZva2VGdW5jdGlvbihsYW1iZGFGbilcbiAgICAgICAgfSk7XG4gICAgICBcbiAgICAgICAgY29uc3Qgc2V0Q3JlYXRlRGF0YXNldEdyb3VwID0gbmV3IHNmbi5QYXNzKHRoaXMsICdTZXQgQ3JlYXRlIERhdGFzZXQgR3JvdXAnLCB7XG4gICAgICAgICAgICByZXN1bHQ6IHsgdmFsdWU6IHsgdmVyYjogXCJjcmVhdGVEYXRhc2V0R3JvdXBcIiwgcGFyYW1zOiB7IG5hbWU6IFwiZGF0YXNldEdyb3VwTmFtZS4kXCJ9IH0gfSxcbiAgICAgICAgICAgIHJlc3VsdFBhdGg6IFwiJC5hY3Rpb25cIlxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB3YWl0MzBTZWNvbmRzID0gbmV3IHNmbi5XYWl0KHRoaXMsICdXYWl0IDMwIFNlY29uZHMnLCB7IFxuICAgICAgICAgICAgdGltZTogc2ZuLldhaXRUaW1lLmR1cmF0aW9uKGNkay5EdXJhdGlvbi5zZWNvbmRzKDMwKSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZmFpbCA9IG5ldyBzZm4uRmFpbCh0aGlzLCAnQ3JlYXRlIEZhaWxlZCcpO1xuXG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBuZXcgc2ZuLlN1Y2NlZWQodGhpcywgJ1N1Y2Nlc3MnKTtcblxuICAgICAgICBjb25zdCBpc0NvbXBsZXRlID0gbmV3IHNmbi5DaG9pY2UodGhpcywgJ0NyZWF0ZSBDb21wbGV0ZT8nKTtcblxuICAgICAgICBjb25zdCBkc2dDaGFpbiA9IHNmbi5DaGFpblxuICAgICAgICAgICAgLnN0YXJ0KHNldENyZWF0ZURhdGFzZXRHcm91cClcbiAgICAgICAgICAgIC5uZXh0KGNyZWF0ZURhdGFzZXRHcm91cClcbiAgICAgICAgICAgIC5uZXh0KHdhaXQzMFNlY29uZHMpXG4gICAgICAgICAgICAubmV4dChkZXNjcmliZURhdGFzZXRHcm91cFN0YXR1cylcbiAgICAgICAgICAgIC5uZXh0KGlzQ29tcGxldGVcbiAgICAgICAgICAgICAgICAud2hlbihzZm4uQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5hY3Rpb24ucmVzdWx0LnN0YXR1cycsICdDUkVBVEUgUEVORElORycpLCB3YWl0MzBTZWNvbmRzKVxuICAgICAgICAgICAgICAgIC53aGVuKHNmbi5Db25kaXRpb24uc3RyaW5nRXF1YWxzKCckLmFjdGlvbi5yZXN1bHQuc3RhdHVzJywgJ0NSRUFURSBJTl9QUk9HUkVTUycpLCB3YWl0MzBTZWNvbmRzKVxuICAgICAgICAgICAgICAgIC53aGVuKHNmbi5Db25kaXRpb24uc3RyaW5nRXF1YWxzKCckLmFjdGlvbi5yZXN1bHQuc3RhdHVzJywgJ0NSRUFURSBGQUlMRUQnKSwgZmFpbClcbiAgICAgICAgICAgICAgICAud2hlbihzZm4uQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5hY3Rpb24ucmVzdWx0LnN0YXR1cycsICdBQ1RJVkUnKSwgc3VjY2VzcykpO1xuXG4gICAgICAgIG5ldyBzZm4uU3RhdGVNYWNoaW5lKHRoaXMsICdDcmVhdGUgRGF0YXNldCBHcm91cCBNYWNoaW5lJywge1xuICAgICAgICAgICAgZGVmaW5pdGlvbjogZHNnQ2hhaW4sXG4gICAgICAgICAgICB0aW1lb3V0OiBjZGsuRHVyYXRpb24uc2Vjb25kcygzMClcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xubmV3IEpvYlBvbGxlclN0YWNrKGFwcCwgJ2F3cy1zdGVwZnVuY3Rpb25zLWludGVnJyk7XG5hcHAuc3ludGgoKTtcbiJdfQ==