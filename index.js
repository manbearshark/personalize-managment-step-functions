"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const iam = require("@aws-cdk/aws-iam");
const sfn = require("@aws-cdk/aws-stepfunctions");
const lambda = require("@aws-cdk/aws-lambda");
const sfn_tasks = require("@aws-cdk/aws-stepfunctions-tasks");
class PersonalizeManagementStack extends cdk.Stack {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const lambdaFn = new lambda.Function(this, 'PersonalizeAPIExecutor', {
            code: new lambda.AssetCode('resource/lambda'),
            handler: 'action-executor.handler',
            runtime: lambda.Runtime.NODEJS_10_X,
        });
        if (lambdaFn.role) { // This weirdness is to get around TypeScript 'undefined' rules
            lambdaFn.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonPersonalizeFullAccess'));
            lambdaFn.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('CloudWatchFullAccess'));
        }
        const createDatasetGroup = new sfn.Task(this, 'Create Dataset Group', {
            task: new sfn_tasks.InvokeFunction(lambdaFn)
        });
        const describeDatasetGroupStatus = new sfn.Task(this, 'Describe Dataset Group', {
            task: new sfn_tasks.InvokeFunction(lambdaFn),
            outputPath: "$.datasetGroup"
        });
        const setCreateDatasetGroup = new sfn.Pass(this, 'Set Create Dataset Group', {
            parameters: { verb: "createDatasetGroup", params: { "name.$": "$.name" } },
            //result: { value: { verb: "createDatasetGroup", params: { name: "datasetGroupName.$"} } },
            //outputPath: "$.result"
            resultPath: "$.action"
        });
        const setDescribeDatasetGroup = new sfn.Pass(this, 'Set Describe Dataset Group', {
            parameters: { verb: "describeDatasetGroup", params: { "datasetGroupArn.$": "$.datasetGroupArn" } },
            resultPath: "$.action"
        });
        const wait5Seconds = new sfn.Wait(this, 'Wait 5 Seconds', {
            time: sfn.WaitTime.duration(cdk.Duration.seconds(5))
        });
        const fail = new sfn.Fail(this, 'Create Failed');
        const success = new sfn.Succeed(this, 'Success');
        const isComplete = new sfn.Choice(this, 'Create Complete?');
        const dsgChain = sfn.Chain
            .start(setCreateDatasetGroup)
            .next(createDatasetGroup)
            .next(setDescribeDatasetGroup)
            .next(wait5Seconds)
            .next(describeDatasetGroupStatus)
            .next(isComplete
            .when(sfn.Condition.stringEquals('$.status', 'CREATE PENDING'), setDescribeDatasetGroup)
            .when(sfn.Condition.stringEquals('$.status', 'CREATE IN_PROGRESS'), setDescribeDatasetGroup)
            .when(sfn.Condition.stringEquals('$.status', 'CREATE FAILED'), fail)
            .when(sfn.Condition.stringEquals('$.status', 'ACTIVE'), success));
        new sfn.StateMachine(this, 'Create Dataset Group Machine', {
            definition: dsgChain
            //timeout: cdk.Duration.seconds(30)
        });
    }
}
const app = new cdk.App();
new PersonalizeManagementStack(app, 'personalize-management-app');
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFzQztBQUN0Qyx3Q0FBeUM7QUFDekMsa0RBQW1EO0FBQ25ELDhDQUErQztBQUMvQyw4REFBK0Q7QUFFL0QsTUFBTSwwQkFBMkIsU0FBUSxHQUFHLENBQUMsS0FBSztJQUM5QyxZQUFZLEtBQWMsRUFBRSxFQUFVLEVBQUUsUUFBd0IsRUFBRTtRQUM5RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLHdCQUF3QixFQUFFO1lBQ2pFLElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUM7WUFDN0MsT0FBTyxFQUFFLHlCQUF5QjtZQUNsQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1NBQ3BDLENBQUMsQ0FBQztRQUVMLElBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFHLCtEQUErRDtZQUNoRixRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZILFFBQVEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7U0FDdEc7UUFFRCxNQUFNLGtCQUFrQixHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLEVBQUU7WUFDbEUsSUFBSSxFQUFFLElBQUksU0FBUyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7U0FDL0MsQ0FBQyxDQUFDO1FBRUgsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLHdCQUF3QixFQUFFO1lBQzVFLElBQUksRUFBRSxJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO1lBQzVDLFVBQVUsRUFBRSxnQkFBZ0I7U0FDL0IsQ0FBQyxDQUFDO1FBRUgsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLDBCQUEwQixFQUFFO1lBQ3pFLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDMUUsMkZBQTJGO1lBQzNGLHdCQUF3QjtZQUN4QixVQUFVLEVBQUUsVUFBVTtTQUN6QixDQUFDLENBQUM7UUFFSCxNQUFNLHVCQUF1QixHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsNEJBQTRCLEVBQUU7WUFDN0UsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLHNCQUFzQixFQUFFLE1BQU0sRUFBRSxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLEVBQUU7WUFDbEcsVUFBVSxFQUFFLFVBQVU7U0FDekIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUN0RCxJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkQsQ0FBQyxDQUFDO1FBRUgsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsQ0FBQztRQUVqRCxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRWpELE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUU1RCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSzthQUNyQixLQUFLLENBQUMscUJBQXFCLENBQUM7YUFDNUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDO2FBQ3hCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQzthQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDO2FBQ2xCLElBQUksQ0FBQywwQkFBMEIsQ0FBQzthQUNoQyxJQUFJLENBQUMsVUFBVTthQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSx1QkFBdUIsQ0FBQzthQUN2RixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLG9CQUFvQixDQUFDLEVBQUUsdUJBQXVCLENBQUM7YUFDM0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxlQUFlLENBQUMsRUFBRSxJQUFJLENBQUM7YUFDbkUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRTFFLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsOEJBQThCLEVBQUU7WUFDdkQsVUFBVSxFQUFFLFFBQVE7WUFDcEIsbUNBQW1DO1NBQ3RDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQUVELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLElBQUksMEJBQTBCLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDLENBQUM7QUFDbEUsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NvcmUnKTtcbmltcG9ydCBpYW0gPSByZXF1aXJlKFwiQGF3cy1jZGsvYXdzLWlhbVwiKTtcbmltcG9ydCBzZm4gPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucycpO1xuaW1wb3J0IGxhbWJkYSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnKTtcbmltcG9ydCBzZm5fdGFza3MgPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucy10YXNrcycpO1xuXG5jbGFzcyBQZXJzb25hbGl6ZU1hbmFnZW1lbnRTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcsIHByb3BzOiBjZGsuU3RhY2tQcm9wcyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgICAgIGNvbnN0IGxhbWJkYUZuID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnUGVyc29uYWxpemVBUElFeGVjdXRvcicsIHtcbiAgICAgICAgICAgIGNvZGU6IG5ldyBsYW1iZGEuQXNzZXRDb2RlKCdyZXNvdXJjZS9sYW1iZGEnKSxcbiAgICAgICAgICAgIGhhbmRsZXI6ICdhY3Rpb24tZXhlY3V0b3IuaGFuZGxlcicsXG4gICAgICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTBfWCxcbiAgICAgICAgICB9KTtcblxuICAgICAgICBpZihsYW1iZGFGbi5yb2xlKSB7ICAvLyBUaGlzIHdlaXJkbmVzcyBpcyB0byBnZXQgYXJvdW5kIFR5cGVTY3JpcHQgJ3VuZGVmaW5lZCcgcnVsZXNcbiAgICAgICAgICAgIGxhbWJkYUZuLnJvbGUuYWRkTWFuYWdlZFBvbGljeShpYW0uTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoJ3NlcnZpY2Utcm9sZS9BbWF6b25QZXJzb25hbGl6ZUZ1bGxBY2Nlc3MnKSk7XG4gICAgICAgICAgICBsYW1iZGFGbi5yb2xlLmFkZE1hbmFnZWRQb2xpY3koaWFtLk1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKCdDbG91ZFdhdGNoRnVsbEFjY2VzcycpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgY3JlYXRlRGF0YXNldEdyb3VwID0gbmV3IHNmbi5UYXNrKHRoaXMsICdDcmVhdGUgRGF0YXNldCBHcm91cCcsIHtcbiAgICAgICAgICAgIHRhc2s6IG5ldyBzZm5fdGFza3MuSW52b2tlRnVuY3Rpb24obGFtYmRhRm4pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGRlc2NyaWJlRGF0YXNldEdyb3VwU3RhdHVzID0gbmV3IHNmbi5UYXNrKHRoaXMsICdEZXNjcmliZSBEYXRhc2V0IEdyb3VwJywge1xuICAgICAgICAgICAgdGFzazogbmV3IHNmbl90YXNrcy5JbnZva2VGdW5jdGlvbihsYW1iZGFGbiksXG4gICAgICAgICAgICBvdXRwdXRQYXRoOiBcIiQuZGF0YXNldEdyb3VwXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc2V0Q3JlYXRlRGF0YXNldEdyb3VwID0gbmV3IHNmbi5QYXNzKHRoaXMsICdTZXQgQ3JlYXRlIERhdGFzZXQgR3JvdXAnLCB7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB7IHZlcmI6IFwiY3JlYXRlRGF0YXNldEdyb3VwXCIsIHBhcmFtczogeyBcIm5hbWUuJFwiOiBcIiQubmFtZVwiIH0gfSxcbiAgICAgICAgICAgIC8vcmVzdWx0OiB7IHZhbHVlOiB7IHZlcmI6IFwiY3JlYXRlRGF0YXNldEdyb3VwXCIsIHBhcmFtczogeyBuYW1lOiBcImRhdGFzZXRHcm91cE5hbWUuJFwifSB9IH0sXG4gICAgICAgICAgICAvL291dHB1dFBhdGg6IFwiJC5yZXN1bHRcIlxuICAgICAgICAgICAgcmVzdWx0UGF0aDogXCIkLmFjdGlvblwiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHNldERlc2NyaWJlRGF0YXNldEdyb3VwID0gbmV3IHNmbi5QYXNzKHRoaXMsICdTZXQgRGVzY3JpYmUgRGF0YXNldCBHcm91cCcsIHtcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHsgdmVyYjogXCJkZXNjcmliZURhdGFzZXRHcm91cFwiLCBwYXJhbXM6IHsgXCJkYXRhc2V0R3JvdXBBcm4uJFwiOiBcIiQuZGF0YXNldEdyb3VwQXJuXCIgfSB9LFxuICAgICAgICAgICAgcmVzdWx0UGF0aDogXCIkLmFjdGlvblwiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHdhaXQ1U2Vjb25kcyA9IG5ldyBzZm4uV2FpdCh0aGlzLCAnV2FpdCA1IFNlY29uZHMnLCB7IFxuICAgICAgICAgICAgdGltZTogc2ZuLldhaXRUaW1lLmR1cmF0aW9uKGNkay5EdXJhdGlvbi5zZWNvbmRzKDUpKVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBmYWlsID0gbmV3IHNmbi5GYWlsKHRoaXMsICdDcmVhdGUgRmFpbGVkJyk7XG5cbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IG5ldyBzZm4uU3VjY2VlZCh0aGlzLCAnU3VjY2VzcycpO1xuXG4gICAgICAgIGNvbnN0IGlzQ29tcGxldGUgPSBuZXcgc2ZuLkNob2ljZSh0aGlzLCAnQ3JlYXRlIENvbXBsZXRlPycpO1xuXG4gICAgICAgIGNvbnN0IGRzZ0NoYWluID0gc2ZuLkNoYWluXG4gICAgICAgICAgICAuc3RhcnQoc2V0Q3JlYXRlRGF0YXNldEdyb3VwKVxuICAgICAgICAgICAgLm5leHQoY3JlYXRlRGF0YXNldEdyb3VwKVxuICAgICAgICAgICAgLm5leHQoc2V0RGVzY3JpYmVEYXRhc2V0R3JvdXApXG4gICAgICAgICAgICAubmV4dCh3YWl0NVNlY29uZHMpXG4gICAgICAgICAgICAubmV4dChkZXNjcmliZURhdGFzZXRHcm91cFN0YXR1cylcbiAgICAgICAgICAgIC5uZXh0KGlzQ29tcGxldGVcbiAgICAgICAgICAgICAgICAud2hlbihzZm4uQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5zdGF0dXMnLCAnQ1JFQVRFIFBFTkRJTkcnKSwgc2V0RGVzY3JpYmVEYXRhc2V0R3JvdXApXG4gICAgICAgICAgICAgICAgLndoZW4oc2ZuLkNvbmRpdGlvbi5zdHJpbmdFcXVhbHMoJyQuc3RhdHVzJywgJ0NSRUFURSBJTl9QUk9HUkVTUycpLCBzZXREZXNjcmliZURhdGFzZXRHcm91cClcbiAgICAgICAgICAgICAgICAud2hlbihzZm4uQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5zdGF0dXMnLCAnQ1JFQVRFIEZBSUxFRCcpLCBmYWlsKVxuICAgICAgICAgICAgICAgIC53aGVuKHNmbi5Db25kaXRpb24uc3RyaW5nRXF1YWxzKCckLnN0YXR1cycsICdBQ1RJVkUnKSwgc3VjY2VzcykpO1xuXG4gICAgICAgIG5ldyBzZm4uU3RhdGVNYWNoaW5lKHRoaXMsICdDcmVhdGUgRGF0YXNldCBHcm91cCBNYWNoaW5lJywge1xuICAgICAgICAgICAgZGVmaW5pdGlvbjogZHNnQ2hhaW5cbiAgICAgICAgICAgIC8vdGltZW91dDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMzApXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbm5ldyBQZXJzb25hbGl6ZU1hbmFnZW1lbnRTdGFjayhhcHAsICdwZXJzb25hbGl6ZS1tYW5hZ2VtZW50LWFwcCcpO1xuYXBwLnN5bnRoKCk7XG4iXX0=