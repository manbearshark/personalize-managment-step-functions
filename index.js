"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const iam = require("@aws-cdk/aws-iam");
const sfn = require("@aws-cdk/aws-stepfunctions");
const lambda = require("@aws-cdk/aws-lambda");
const sfn_tasks = require("@aws-cdk/aws-stepfunctions-tasks");
class JobPollerStack extends cdk.Stack {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const lambdaFn = new lambda.Function(this, 'PersonalizeAPIExecutor', {
            code: new lambda.AssetCode('resource/lambda'),
            handler: 'action-executor.handler',
            runtime: lambda.Runtime.NODEJS_10_X,
        });
        if (lambdaFn.role) { // This weirdness is to get around TypeScript 'undefined' rules
            lambdaFn.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonPersonalizeFullAccess'));
            lambdaFn.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('CloudWatchFullAccess'));
        }
        const createDatasetGroup = new sfn.Task(this, 'Create Dataset Group', {
            task: new sfn_tasks.InvokeFunction(lambdaFn)
        });
        const describeDatasetGroupStatus = new sfn.Task(this, 'Describe Dataset Group', {
            task: new sfn_tasks.InvokeFunction(lambdaFn)
        });
        const setCreateDatasetGroup = new sfn.Pass(this, 'Set Create Dataset Group', {
            parameters: { verb: "createDatasetGroup", params: { "name.$": "$.datasetGroupName" } },
            //result: { value: { verb: "createDatasetGroup", params: { name: "datasetGroupName.$"} } },
            resultPath: "$.action",
            outputPath: "$.action"
        });
        const setDescribeDatasetGroup = new sfn.Pass(this, 'Set Describe Dataset Group', {
            parameters: { verb: "describeDatasetGroup", params: { "datasetGroupArn.$": "$.action.result.datasetGroupArn" } },
            resultPath: "$.action"
        });
        const wait5Seconds = new sfn.Wait(this, 'Wait 5 Seconds', {
            time: sfn.WaitTime.duration(cdk.Duration.seconds(5))
        });
        const fail = new sfn.Fail(this, 'Create Failed');
        const success = new sfn.Succeed(this, 'Success');
        const isComplete = new sfn.Choice(this, 'Create Complete?');
        const dsgChain = sfn.Chain
            .start(setCreateDatasetGroup)
            .next(createDatasetGroup)
            .next(setDescribeDatasetGroup)
            .next(wait5Seconds)
            .next(describeDatasetGroupStatus)
            .next(isComplete
            .when(sfn.Condition.stringEquals('$.action.result.status', 'CREATE PENDING'), wait5Seconds)
            .when(sfn.Condition.stringEquals('$.action.result.status', 'CREATE IN_PROGRESS'), wait5Seconds)
            .when(sfn.Condition.stringEquals('$.action.result.status', 'CREATE FAILED'), fail)
            .when(sfn.Condition.stringEquals('$.action.result.status', 'ACTIVE'), success));
        new sfn.StateMachine(this, 'Create Dataset Group Machine', {
            definition: dsgChain,
            timeout: cdk.Duration.seconds(30)
        });
    }
}
const app = new cdk.App();
new JobPollerStack(app, 'aws-stepfunctions-integ');
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFzQztBQUN0Qyx3Q0FBeUM7QUFDekMsa0RBQW1EO0FBQ25ELDhDQUErQztBQUMvQyw4REFBK0Q7QUFFL0QsTUFBTSxjQUFlLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDbEMsWUFBWSxLQUFjLEVBQUUsRUFBVSxFQUFFLFFBQXdCLEVBQUU7UUFDOUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSx3QkFBd0IsRUFBRTtZQUNqRSxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDO1lBQzdDLE9BQU8sRUFBRSx5QkFBeUI7WUFDbEMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztTQUNwQyxDQUFDLENBQUM7UUFFTCxJQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRywrREFBK0Q7WUFDaEYsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQztZQUN2SCxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1NBQ3RHO1FBRUQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLHNCQUFzQixFQUFFO1lBQ2xFLElBQUksRUFBRSxJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO1NBQy9DLENBQUMsQ0FBQztRQUVILE1BQU0sMEJBQTBCLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSx3QkFBd0IsRUFBRTtZQUM1RSxJQUFJLEVBQUUsSUFBSSxTQUFTLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQztTQUMvQyxDQUFDLENBQUM7UUFFSCxNQUFNLHFCQUFxQixHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsMEJBQTBCLEVBQUU7WUFDekUsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxFQUFFO1lBQ3RGLDJGQUEyRjtZQUMzRixVQUFVLEVBQUUsVUFBVTtZQUN0QixVQUFVLEVBQUUsVUFBVTtTQUN6QixDQUFDLENBQUM7UUFFSCxNQUFNLHVCQUF1QixHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsNEJBQTRCLEVBQUU7WUFDN0UsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLHNCQUFzQixFQUFFLE1BQU0sRUFBRSxFQUFFLG1CQUFtQixFQUFFLGlDQUFpQyxFQUFFLEVBQUU7WUFDaEgsVUFBVSxFQUFFLFVBQVU7U0FDekIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUN0RCxJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkQsQ0FBQyxDQUFDO1FBRUgsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsQ0FBQztRQUVqRCxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRWpELE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUU1RCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSzthQUNyQixLQUFLLENBQUMscUJBQXFCLENBQUM7YUFDNUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDO2FBQ3hCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQzthQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDO2FBQ2xCLElBQUksQ0FBQywwQkFBMEIsQ0FBQzthQUNoQyxJQUFJLENBQUMsVUFBVTthQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLFlBQVksQ0FBQzthQUMxRixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsd0JBQXdCLEVBQUUsb0JBQW9CLENBQUMsRUFBRSxZQUFZLENBQUM7YUFDOUYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFFLGVBQWUsQ0FBQyxFQUFFLElBQUksQ0FBQzthQUNqRixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsd0JBQXdCLEVBQUUsUUFBUSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUV4RixJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLDhCQUE4QixFQUFFO1lBQ3ZELFVBQVUsRUFBRSxRQUFRO1lBQ3BCLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7U0FDcEMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsSUFBSSxjQUFjLENBQUMsR0FBRyxFQUFFLHlCQUF5QixDQUFDLENBQUM7QUFDbkQsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NvcmUnKTtcbmltcG9ydCBpYW0gPSByZXF1aXJlKFwiQGF3cy1jZGsvYXdzLWlhbVwiKTtcbmltcG9ydCBzZm4gPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucycpO1xuaW1wb3J0IGxhbWJkYSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnKTtcbmltcG9ydCBzZm5fdGFza3MgPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucy10YXNrcycpO1xuXG5jbGFzcyBKb2JQb2xsZXJTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcsIHByb3BzOiBjZGsuU3RhY2tQcm9wcyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgICAgIGNvbnN0IGxhbWJkYUZuID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnUGVyc29uYWxpemVBUElFeGVjdXRvcicsIHtcbiAgICAgICAgICAgIGNvZGU6IG5ldyBsYW1iZGEuQXNzZXRDb2RlKCdyZXNvdXJjZS9sYW1iZGEnKSxcbiAgICAgICAgICAgIGhhbmRsZXI6ICdhY3Rpb24tZXhlY3V0b3IuaGFuZGxlcicsXG4gICAgICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTBfWCxcbiAgICAgICAgICB9KTtcblxuICAgICAgICBpZihsYW1iZGFGbi5yb2xlKSB7ICAvLyBUaGlzIHdlaXJkbmVzcyBpcyB0byBnZXQgYXJvdW5kIFR5cGVTY3JpcHQgJ3VuZGVmaW5lZCcgcnVsZXNcbiAgICAgICAgICAgIGxhbWJkYUZuLnJvbGUuYWRkTWFuYWdlZFBvbGljeShpYW0uTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoJ3NlcnZpY2Utcm9sZS9BbWF6b25QZXJzb25hbGl6ZUZ1bGxBY2Nlc3MnKSk7XG4gICAgICAgICAgICBsYW1iZGFGbi5yb2xlLmFkZE1hbmFnZWRQb2xpY3koaWFtLk1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKCdDbG91ZFdhdGNoRnVsbEFjY2VzcycpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgY3JlYXRlRGF0YXNldEdyb3VwID0gbmV3IHNmbi5UYXNrKHRoaXMsICdDcmVhdGUgRGF0YXNldCBHcm91cCcsIHtcbiAgICAgICAgICAgIHRhc2s6IG5ldyBzZm5fdGFza3MuSW52b2tlRnVuY3Rpb24obGFtYmRhRm4pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGRlc2NyaWJlRGF0YXNldEdyb3VwU3RhdHVzID0gbmV3IHNmbi5UYXNrKHRoaXMsICdEZXNjcmliZSBEYXRhc2V0IEdyb3VwJywge1xuICAgICAgICAgICAgdGFzazogbmV3IHNmbl90YXNrcy5JbnZva2VGdW5jdGlvbihsYW1iZGFGbilcbiAgICAgICAgfSk7XG4gICAgICBcbiAgICAgICAgY29uc3Qgc2V0Q3JlYXRlRGF0YXNldEdyb3VwID0gbmV3IHNmbi5QYXNzKHRoaXMsICdTZXQgQ3JlYXRlIERhdGFzZXQgR3JvdXAnLCB7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB7IHZlcmI6IFwiY3JlYXRlRGF0YXNldEdyb3VwXCIsIHBhcmFtczogeyBcIm5hbWUuJFwiOiBcIiQuZGF0YXNldEdyb3VwTmFtZVwiIH0gfSxcbiAgICAgICAgICAgIC8vcmVzdWx0OiB7IHZhbHVlOiB7IHZlcmI6IFwiY3JlYXRlRGF0YXNldEdyb3VwXCIsIHBhcmFtczogeyBuYW1lOiBcImRhdGFzZXRHcm91cE5hbWUuJFwifSB9IH0sXG4gICAgICAgICAgICByZXN1bHRQYXRoOiBcIiQuYWN0aW9uXCIsXG4gICAgICAgICAgICBvdXRwdXRQYXRoOiBcIiQuYWN0aW9uXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc2V0RGVzY3JpYmVEYXRhc2V0R3JvdXAgPSBuZXcgc2ZuLlBhc3ModGhpcywgJ1NldCBEZXNjcmliZSBEYXRhc2V0IEdyb3VwJywge1xuICAgICAgICAgICAgcGFyYW1ldGVyczogeyB2ZXJiOiBcImRlc2NyaWJlRGF0YXNldEdyb3VwXCIsIHBhcmFtczogeyBcImRhdGFzZXRHcm91cEFybi4kXCI6IFwiJC5hY3Rpb24ucmVzdWx0LmRhdGFzZXRHcm91cEFyblwiIH0gfSxcbiAgICAgICAgICAgIHJlc3VsdFBhdGg6IFwiJC5hY3Rpb25cIlxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB3YWl0NVNlY29uZHMgPSBuZXcgc2ZuLldhaXQodGhpcywgJ1dhaXQgNSBTZWNvbmRzJywgeyBcbiAgICAgICAgICAgIHRpbWU6IHNmbi5XYWl0VGltZS5kdXJhdGlvbihjZGsuRHVyYXRpb24uc2Vjb25kcyg1KSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZmFpbCA9IG5ldyBzZm4uRmFpbCh0aGlzLCAnQ3JlYXRlIEZhaWxlZCcpO1xuXG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBuZXcgc2ZuLlN1Y2NlZWQodGhpcywgJ1N1Y2Nlc3MnKTtcblxuICAgICAgICBjb25zdCBpc0NvbXBsZXRlID0gbmV3IHNmbi5DaG9pY2UodGhpcywgJ0NyZWF0ZSBDb21wbGV0ZT8nKTtcblxuICAgICAgICBjb25zdCBkc2dDaGFpbiA9IHNmbi5DaGFpblxuICAgICAgICAgICAgLnN0YXJ0KHNldENyZWF0ZURhdGFzZXRHcm91cClcbiAgICAgICAgICAgIC5uZXh0KGNyZWF0ZURhdGFzZXRHcm91cClcbiAgICAgICAgICAgIC5uZXh0KHNldERlc2NyaWJlRGF0YXNldEdyb3VwKVxuICAgICAgICAgICAgLm5leHQod2FpdDVTZWNvbmRzKVxuICAgICAgICAgICAgLm5leHQoZGVzY3JpYmVEYXRhc2V0R3JvdXBTdGF0dXMpXG4gICAgICAgICAgICAubmV4dChpc0NvbXBsZXRlXG4gICAgICAgICAgICAgICAgLndoZW4oc2ZuLkNvbmRpdGlvbi5zdHJpbmdFcXVhbHMoJyQuYWN0aW9uLnJlc3VsdC5zdGF0dXMnLCAnQ1JFQVRFIFBFTkRJTkcnKSwgd2FpdDVTZWNvbmRzKVxuICAgICAgICAgICAgICAgIC53aGVuKHNmbi5Db25kaXRpb24uc3RyaW5nRXF1YWxzKCckLmFjdGlvbi5yZXN1bHQuc3RhdHVzJywgJ0NSRUFURSBJTl9QUk9HUkVTUycpLCB3YWl0NVNlY29uZHMpXG4gICAgICAgICAgICAgICAgLndoZW4oc2ZuLkNvbmRpdGlvbi5zdHJpbmdFcXVhbHMoJyQuYWN0aW9uLnJlc3VsdC5zdGF0dXMnLCAnQ1JFQVRFIEZBSUxFRCcpLCBmYWlsKVxuICAgICAgICAgICAgICAgIC53aGVuKHNmbi5Db25kaXRpb24uc3RyaW5nRXF1YWxzKCckLmFjdGlvbi5yZXN1bHQuc3RhdHVzJywgJ0FDVElWRScpLCBzdWNjZXNzKSk7XG5cbiAgICAgICAgbmV3IHNmbi5TdGF0ZU1hY2hpbmUodGhpcywgJ0NyZWF0ZSBEYXRhc2V0IEdyb3VwIE1hY2hpbmUnLCB7XG4gICAgICAgICAgICBkZWZpbml0aW9uOiBkc2dDaGFpbixcbiAgICAgICAgICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDMwKVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5uZXcgSm9iUG9sbGVyU3RhY2soYXBwLCAnYXdzLXN0ZXBmdW5jdGlvbnMtaW50ZWcnKTtcbmFwcC5zeW50aCgpO1xuIl19