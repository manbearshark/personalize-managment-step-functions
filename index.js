"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const sfn = require("@aws-cdk/aws-stepfunctions");
const lambda = require("@aws-cdk/aws-lambda");
const sfn_tasks = require("@aws-cdk/aws-stepfunctions-tasks");
class JobPollerStack extends cdk.Stack {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const lambdaFn = new lambda.Function(this, 'IncrementFunction', {
            code: new lambda.AssetCode('resource/lambda'),
            handler: 'action-executor.handler',
            runtime: lambda.Runtime.NODEJS_10_X,
        });
        const submitJob = new sfn.Task(this, 'Submit Job', {
            task: new sfn_tasks.InvokeFunction(lambdaFn)
        });
        const createDatasetImportJob = new sfn.Pass(this, 'Set Create Dataset Import Job', {
            result: { value: "createDatasetImportJob" },
            resultPath: "$.action"
        });
        const successJob = new sfn.Succeed(this, 'Success');
        const isComplete = new sfn.Choice(this, 'Job Complete?');
        const chain = sfn.Chain
            .start(submitJob)
            .next(createDatasetImportJob)
            .next(isComplete
            .when(sfn.Condition.numberEquals('$.count', 5), successJob)
            .when(sfn.Condition.numberLessThan('$.count', 5), submitJob));
        new sfn.StateMachine(this, 'StateMachine', {
            definition: chain,
            timeout: cdk.Duration.seconds(30)
        });
    }
}
const app = new cdk.App();
new JobPollerStack(app, 'aws-stepfunctions-integ');
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFzQztBQUN0QyxrREFBbUQ7QUFDbkQsOENBQStDO0FBQy9DLDhEQUErRDtBQUUvRCxNQUFNLGNBQWUsU0FBUSxHQUFHLENBQUMsS0FBSztJQUNsQyxZQUFZLEtBQWMsRUFBRSxFQUFVLEVBQUUsUUFBd0IsRUFBRTtRQUM5RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFO1lBQzVELElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUM7WUFDN0MsT0FBTyxFQUFFLHlCQUF5QjtZQUNsQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1NBQ3BDLENBQUMsQ0FBQztRQUVMLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQy9DLElBQUksRUFBRSxJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO1NBQy9DLENBQUMsQ0FBQztRQUVILE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSwrQkFBK0IsRUFBRTtZQUMvRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsd0JBQXdCLEVBQUU7WUFDM0MsVUFBVSxFQUFFLFVBQVU7U0FDekIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxVQUFVLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVwRCxNQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBRXpELE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLO2FBQ2xCLEtBQUssQ0FBQyxTQUFTLENBQUM7YUFDaEIsSUFBSSxDQUFDLHNCQUFzQixDQUFDO2FBQzVCLElBQUksQ0FBQyxVQUFVO2FBQ1gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUM7YUFDMUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBRXRFLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFO1lBQ3ZDLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7U0FDcEMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsSUFBSSxjQUFjLENBQUMsR0FBRyxFQUFFLHlCQUF5QixDQUFDLENBQUM7QUFDbkQsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NvcmUnKTtcbmltcG9ydCBzZm4gPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucycpO1xuaW1wb3J0IGxhbWJkYSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnKTtcbmltcG9ydCBzZm5fdGFza3MgPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucy10YXNrcycpO1xuXG5jbGFzcyBKb2JQb2xsZXJTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcsIHByb3BzOiBjZGsuU3RhY2tQcm9wcyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgICAgIGNvbnN0IGxhbWJkYUZuID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnSW5jcmVtZW50RnVuY3Rpb24nLCB7XG4gICAgICAgICAgICBjb2RlOiBuZXcgbGFtYmRhLkFzc2V0Q29kZSgncmVzb3VyY2UvbGFtYmRhJyksXG4gICAgICAgICAgICBoYW5kbGVyOiAnYWN0aW9uLWV4ZWN1dG9yLmhhbmRsZXInLFxuICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzEwX1gsXG4gICAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzdWJtaXRKb2IgPSBuZXcgc2ZuLlRhc2sodGhpcywgJ1N1Ym1pdCBKb2InLCB7XG4gICAgICAgICAgICB0YXNrOiBuZXcgc2ZuX3Rhc2tzLkludm9rZUZ1bmN0aW9uKGxhbWJkYUZuKVxuICAgICAgICB9KTtcbiAgICAgIFxuICAgICAgICBjb25zdCBjcmVhdGVEYXRhc2V0SW1wb3J0Sm9iID0gbmV3IHNmbi5QYXNzKHRoaXMsICdTZXQgQ3JlYXRlIERhdGFzZXQgSW1wb3J0IEpvYicsIHtcbiAgICAgICAgICAgIHJlc3VsdDogeyB2YWx1ZTogXCJjcmVhdGVEYXRhc2V0SW1wb3J0Sm9iXCIgfSxcbiAgICAgICAgICAgIHJlc3VsdFBhdGg6IFwiJC5hY3Rpb25cIlxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzdWNjZXNzSm9iID0gbmV3IHNmbi5TdWNjZWVkKHRoaXMsICdTdWNjZXNzJyk7XG5cbiAgICAgICAgY29uc3QgaXNDb21wbGV0ZSA9IG5ldyBzZm4uQ2hvaWNlKHRoaXMsICdKb2IgQ29tcGxldGU/Jyk7XG5cbiAgICAgICAgY29uc3QgY2hhaW4gPSBzZm4uQ2hhaW5cbiAgICAgICAgICAgIC5zdGFydChzdWJtaXRKb2IpXG4gICAgICAgICAgICAubmV4dChjcmVhdGVEYXRhc2V0SW1wb3J0Sm9iKVxuICAgICAgICAgICAgLm5leHQoaXNDb21wbGV0ZVxuICAgICAgICAgICAgICAgIC53aGVuKHNmbi5Db25kaXRpb24ubnVtYmVyRXF1YWxzKCckLmNvdW50JywgNSksIHN1Y2Nlc3NKb2IpXG4gICAgICAgICAgICAgICAgLndoZW4oc2ZuLkNvbmRpdGlvbi5udW1iZXJMZXNzVGhhbignJC5jb3VudCcsIDUpLCBzdWJtaXRKb2IpKTtcblxuICAgICAgICBuZXcgc2ZuLlN0YXRlTWFjaGluZSh0aGlzLCAnU3RhdGVNYWNoaW5lJywge1xuICAgICAgICAgICAgZGVmaW5pdGlvbjogY2hhaW4sXG4gICAgICAgICAgICB0aW1lb3V0OiBjZGsuRHVyYXRpb24uc2Vjb25kcygzMClcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xubmV3IEpvYlBvbGxlclN0YWNrKGFwcCwgJ2F3cy1zdGVwZnVuY3Rpb25zLWludGVnJyk7XG5hcHAuc3ludGgoKTtcbiJdfQ==